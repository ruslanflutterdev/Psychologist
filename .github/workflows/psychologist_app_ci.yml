name: Flutter CI

# Запуск рабочего процесса при push и pull request в основную ветку
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Устанавливаем тайм-аут по умолчанию для ускорения завершения при зависании
defaults:
  run:
    shell: bash

jobs:
  build:
    # Используем стабильный образ Ubuntu, подходит для Flutter
    runs-on: ubuntu-latest

    steps:
      # 1. Загрузка исходного кода
      - uses: actions/checkout@v4

      # 2. Настройка кэширования для ускорения flutter pub get
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/flutter
          # Кэш зависит от версии Flutter и pubspec.lock
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      # 3. Установка Flutter SDK
      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          # Используем стабильную ветку или конкретную версию, например, '3.22.0'
          channel: 'stable'

      # 4. Получение зависимостей
      - name: Get dependencies
        run: flutter pub get

      # 5. Анализ кода (Code Analysis)
      - name: Analyze code
        run: flutter analyze

      # 6. Запуск юнит- и виджет-тестов
      - name: Run tests
        # Исключаем интеграционные тесты, если они требуют специфической среды
        run: flutter test --coverage --exclude-dir=integration_test
        # Примечание: Если тесты требуют запуска на устройстве, флаги нужно изменить.

      # 7. (Опционально) Сборка для проверки совместимости (Dry Run Build)
      # Проверяет, что проект вообще может быть собран без реального создания артефакта
      - name: Verify Android build compatibility
        run: flutter build apk --debug --no-tree-shake-icons

      - name: Verify Web build compatibility
        run: flutter build web --web-renderer html --no-tree-shake-icons