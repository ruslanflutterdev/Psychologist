name: Flutter CI / CD

on:
  push:
    branches:
      - main # [!code change] Обеспечиваем деплой только из ветки main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest

    # [!code addition] Добавляем permissions для GITHUB_TOKEN для возможности деплоя
    permissions:
      contents: write
      pages: write

    steps:
      - uses: actions/checkout@v4

      # 1. Настройка кэширования Flutter SDK и зависимостей (для ускорения)
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      # 2. Установка Flutter SDK
      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 3. Получение зависимостей и Анализ/Тестирование
      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze

      - name: Run unit tests and filter coverage
        shell: bash
        run: |
          # 1. Запуск тестов и генерация сырого файла покрытия.
          # Флаг --exclude-dir удален, чтобы избежать ошибки 64.
          flutter test --coverage

          LCOV_INFO_FILE="coverage/lcov.info"

          # 2. Фильтрация lcov.info: удаляем ссылки на файлы из integration_test
          if [ -f "$LCOV_INFO_FILE" ]; then
            echo "Filtering lcov.info to exclude integration_test..."
          
            # Используем grep -v для удаления строк, содержащих путь к integration_test
            grep -v "SF:.*integration_test" "$LCOV_INFO_FILE" > temp_lcov.info
          
            # Перемещаем отфильтрованный файл на место оригинального
            mv temp_lcov.info "$LCOV_INFO_FILE"
          
            echo "Filter complete. Clean lcov.info is ready."
          else
            echo "WARNING: coverage/lcov.info not found. Skipping filter."
          fi

      # 4. Сборка Flutter Web (Критически важный шаг для CD)
      - name: Build Flutter Web
        # Используем --base-href, который соответствует имени вашего репозитория
        run: flutter build web --release --base-href /Psychologist/

      # 5. CD: Деплой на GitHub Pages (Используем peaceiris/actions-gh-pages)
      - name: Deploy to GitHub Pages
        if: success() # [!code change] Деплой только после успешного выполнения всех предыдущих шагов
        uses: peaceiris/actions-gh-pages@v4
        with:
          # [!code change] Используем встроенный токен GITHUB_TOKEN, который имеет право записи (contents: write)
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # [!code change] Указываем папку, где лежит результат сборки
          publish_dir: ./build/web
          # [!code change] Указываем, что деплоить нужно в gh-pages
          publish_branch: gh-pages
          # [!code change